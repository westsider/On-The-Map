//
//  StudentInfo.swift
//  On The Map
//
//  Created by Warren Hansen on 10/1/16.
//  Copyright Â© 2016 Warren Hansen. All rights reserved.
//

import Foundation

/// Stores student-entered map information from Parse
struct StudentInformation {
    
    /// The date when the student location was created.
    var createdAt: String
    /// The first name of the student which matches their Udacity profile first name.
    var firstName: String
    /// The last name of the student which matches their Udacity profile last name.
    var lastName: String
    /// The latitude of the student location (ranges from -90 to 90).
    var latitude: Double
    /// The longitude of the student location (ranges from -180 to 180).
    var longitude: Double
    /// The location string used for geocoding the student location.
    var mapString: String
    /// The URL provided by the student.
    var mediaURL: String
    /// An auto-generated id/key generated by Parse which uniquely identifies a StudentLocation.
    var objectId: String
    /// An extra (optional) key used to uniquely identify a StudentLocation (Udacity User ID).
    var uniqueKey: String
    /// The date when the student location was last updated.
    var updatedAt: String
    
    
    // MARK: - Initializer
    
    /// Initializer for Dictionary object
    init( createdAt: String, firstName: String,  lastName: String, latitude: Double, longitude: Double, mapString: String, mediaURL: String, objectId: String, uniqueKey: String, updatedAt: String  ) {
 // crash here nil
        self.createdAt = createdAt
        self.firstName = firstName
        self.lastName  = lastName
        self.latitude  = latitude
        self.longitude = longitude
        self.mapString = mapString
        self.mediaURL  = mediaURL
        self.objectId  = objectId
        self.uniqueKey = uniqueKey
        self.updatedAt = updatedAt
    }
    
//    static func downloadAllEpisodes(data: Data) -> [Episode]
//    {
//        var episodes = [Episode]()
//        
////        let jsonFile = Bundle.main.path(forResource: "DucBlog", ofType: "json")
////        let jsonData = try? Data(contentsOf: URL(fileURLWithPath: jsonFile!))
//        
//        // turn the data into foundation objects (Episodes)
//        if let jsonDictionary = NetworkService.parseJSONFromData(jsonData) {
//            let espDictionaries = jsonDictionary["episodes"] as! [[String : AnyObject]]
//            for espDictionary in espDictionaries {
//                let newEpisode = Episode(espDictionary: espDictionary)
//                episodes.append(newEpisode)
//            }
//        }
//        
//        return episodes
//    }
}

